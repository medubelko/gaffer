# -*- coding: utf-8 -*-
#
# Gaffer documentation build configuration file, created by
# sphinx-quickstart on Tue Apr 12 15:50:27 2016.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os
import re
import inspect
import docutils

import sphinx_rtd_theme
import recommonmark.parser
import recommonmark.transform

import Gaffer

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = []

# Add any paths that contain templates here, relative to this directory.
templates_path = []

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
source_suffix = ['.rst', '.md']

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = Gaffer.About().name()
copyright =Gaffer.About().copyright().replace( "Copyright (c) ", "" )
author = u'John Haddon'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = Gaffer.About().versionString()
# The full version, including alpha/beta/rc tags.
release = Gaffer.About().versionString()

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.
# "<project> v<release> documentation" by default.
#html_title = u'Gaffer v0.24.0.0'

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (relative to this directory) to use as a favicon of
# the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = "_static/favicon.ico"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = [ "_static" ]

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not None, a 'Last updated on:' timestamp is inserted at every page
# bottom, using the given strftime format.
# The empty string is equivalent to '%b %d, %Y'.
#html_last_updated_fmt = None

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
html_show_sourcelink = False

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Language to be used for generating the HTML full-text search index.
# Sphinx supports the following languages:
#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'
#   'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr', 'zh'
#html_search_language = 'en'

# A dictionary with options for the search language support, empty by default.
# 'ja' uses this config value.
# 'zh' user can custom change `jieba` dictionary path.
#html_search_options = {'type': 'default'}

# The name of a javascript file (relative to the configuration directory) that
# implements a search results scorer. If empty, the default will be used.
#html_search_scorer = 'scorer.js'

# Output file base name for HTML help builder.
htmlhelp_basename = 'Gafferdoc'

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',

# Latex figure (float) alignment
#'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'Gaffer.tex', u'Gaffer Documentation',
     u'John Haddon', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'gaffer', u'Gaffer Documentation',
     [author], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'Gaffer', u'Gaffer Documentation',
     author, 'Gaffer', 'One line description of project.',
     'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False

# Set up recommonmark - this parses Markdown to allow it
# to be used with Sphinx.

source_parsers = {
    '.md': recommonmark.parser.CommonMarkParser,
}

source_suffix = ['.rst', '.md']

# Variables for string replacement functions
gaffer_linux_package = '0.46.0.0'
gaffer_osx_package = '0.46.0.0'

arnold_version = '2018'
arnold_path_linux = '/opt/solidangle/mtoa/{0}/'.format( arnold_version )
arnold_path_osx = '/opt/solidangle/mtoa/{0}/'.format( arnold_version )

delight_version = '8.5.1'
delight_path_linux = '/opt/3delightForMaya-{0}/Linux-x86_64/'.format( delight_version )
delight_path_osx = '/opt/3delightForMaya-{0}/Darwin/'.format( delight_version )

tractor_version = '2.2'
tractor_path_linux = '/opt/pixar/Tractor-{0}'.format( tractor_version )
tractor_path_osx = '/Applications/pixar/Tractor-{0}'.format( tractor_version )

## \Todo See if the recommonmark folks would accept a patch with this
#  functionality.
class GafferTransform( recommonmark.transform.AutoStructify ) :

    def auto_admonition( self, node ) :

        """
        Replace blockquotes beginning with "admonitionType :"
        with the equivalent admonition.
        """

        if not len( node ) :
            return None

        if not isinstance( node[0], docutils.nodes.paragraph ) :
            return None

        if not isinstance( node[0][0], docutils.nodes.Text ) :
           return None

        partition = node[0][0].partition( ":" )
        if not partition[1] :
            return None

        admonitions = dict( inspect.getmembers( docutils.nodes, lambda x : inspect.isclass( x ) and issubclass( x, docutils.nodes.Admonition ) ) )

        admonition = partition[0].strip().lower()
        if admonition not in admonitions :
            return None

        node[0][0] = docutils.nodes.Text( partition[2] ) # Remove "admonition : " prefix
        return admonitions[admonition]( "", *node.children )

    def auto_nbsp( self, node ) :

        """
        Insert non-breaking spaces where appropriate
        to improve line wrapping. Currently deals with
        " :" at the end of a paragraph so that the colon
        is not detached from the space.
        """

        if not isinstance( node.parent, docutils.nodes.paragraph ) :
            return None

        if node is not node.parent[-1] :
            return None

        return docutils.nodes.Text( re.sub( u" :\s*$", u"\xa0:", node.astext(), ) )

    def find_replace( self, node ) :

        if isinstance( node, docutils.nodes.block_quote ) :
            return self.auto_admonition( node )
        elif isinstance( node, docutils.nodes.Text ) :
            return self.auto_nbsp( node )
        else :
            return recommonmark.transform.AutoStructify.find_replace( self, node )

def gafferSourceSubstitutions( app, docName, source ) :

    source[0] = source[0].replace( "!GAFFER_VERSION!", Gaffer.About.versionString() )
    source[0] = source[0].replace( "!GAFFER_MILESTONE_VERSION!", str( Gaffer.About.milestoneVersion() ) )
    source[0] = source[0].replace( "!GAFFER_MAJOR_VERSION!", str( Gaffer.About.majorVersion() ) )
    source[0] = source[0].replace( "!GAFFER_MINOR_VERSION!", str( Gaffer.About.minorVersion() ) )
    source[0] = source[0].replace( "!GAFFER_PATCH_VERSION!", str( Gaffer.About.patchVersion() ) )

    source[0] = source[0].replace( "!GAFFER_LINUX_PACKAGE!", gaffer_linux_package )
    source[0] = source[0].replace( "!GAFFER_OSX_PACKAGE!", gaffer_osx_package )

def thirdPartySourceSubtitutions( app, docName, source) :

    source[0] = source[0].replace( "!ARNOLD_VERSION!", arnold_version )
    source[0] = source[0].replace( "!ARNOLD_PATH_LINUX!", arnold_path_linux )
    source[0] = source[0].replace( "!ARNOLD_PATH_OSX!", arnold_path_osx )
    source[0] = source[0].replace( "!3DELIGHT_VERSION!", delight_version )
    source[0] = source[0].replace( "!3DELIGHT_PATH_LINUX!", delight_path_linux )
    source[0] = source[0].replace( "!3DELIGHT_PATH_OSX!", delight_path_osx )
    source[0] = source[0].replace( "!TRACTOR_PATH_LINUX!", tractor_path_linux )
    source[0] = source[0].replace( "!TRACTOR_PATH_OSX!", tractor_path_osx )

def setup( app ) :

    app.add_config_value(
    	'recommonmark_config',
    	{
            # Disable automatic TOC parsing in Markdown. Stopgap solution to prevent 
            # Autostructify from turning all Markdown list items with links into TOC 
            # items. Lets us include end-of-article "See Also" lists.
            'enable_auto_toc_tree': 'False',

            # Disable automatic TOC parsing of headers
            'auto_toc_tree_section': 'True'
        },
        True
    )

    app.add_transform( GafferTransform )

    app.connect( "source-read", gafferSourceSubstitutions )
    
    app.connect( "source-read", thirdPartySourceSubtitutions )

    # Add the custom stylesheet; added to all .md and .rst files in source
    app.add_stylesheet( 'gaffer.css' )
